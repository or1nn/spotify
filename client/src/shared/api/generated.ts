/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Spotify
 * Spotify API
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from "./api-instance";
import type { BodyType } from "./api-instance";
export interface UpdateUserDto {
  name: string;
  email: string;
  avatar: Blob;
  description: string;
  country: string;
}

export interface SignUpDto {
  email: string;
  name: string;
  password: string;
}

export interface SignInDto {
  email: string;
  password: string;
}

export interface CreateTrackDto {
  title: string;
  audio: Blob;
  picture: Blob;
}

export interface UpdateTrackDto {
  title: string;
  audio: Blob;
  picture: Blob;
}

export type AuthControllerVerifyParams = {
  code: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const usersControllerUpdate = (
  id: string,
  updateUserDto: BodyType<UpdateUserDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/users/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateUserDto,
    },
    options,
  );
};

export const authControllerSignUp = (
  signUpDto: BodyType<SignUpDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-up`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signUpDto,
    },
    options,
  );
};

export const authControllerSignIn = (
  signInDto: BodyType<SignInDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-in`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signInDto,
    },
    options,
  );
};

export const authControllerSignOut = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/sign-out`, method: "POST" },
    options,
  );
};

export const authControllerVerify = (
  params: AuthControllerVerifyParams,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/verify`, method: "GET", params },
    options,
  );
};

export const authControllerGetSessionInfo = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>({ url: `/auth/session`, method: "GET" }, options);
};

export const tracksControllerGetAll = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>({ url: `/tracks`, method: "GET" }, options);
};

export const tracksControllerCreate = (
  createTrackDto: BodyType<CreateTrackDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  const formData = new FormData();
  formData.append("title", createTrackDto.title);
  formData.append("audio", createTrackDto.audio);
  formData.append("picture", createTrackDto.picture);

  return createInstance<void>(
    {
      url: `/tracks`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const tracksControllerGetByArtist = (
  id: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/tracks/by-artist/${id}`, method: "GET" },
    options,
  );
};

export const tracksControllerUpdate = (
  id: string,
  updateTrackDto: BodyType<UpdateTrackDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  const formData = new FormData();
  formData.append("title", updateTrackDto.title);
  formData.append("audio", updateTrackDto.audio);
  formData.append("picture", updateTrackDto.picture);

  return createInstance<void>(
    {
      url: `/tracks/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const tracksControllerDelete = (
  id: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/tracks/${id}`, method: "DELETE" },
    options,
  );
};

export type UsersControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdate>>
>;
export type AuthControllerSignUpResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerSignInResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>;
export type AuthControllerSignOutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;
export type AuthControllerVerifyResult = NonNullable<
  Awaited<ReturnType<typeof authControllerVerify>>
>;
export type AuthControllerGetSessionInfoResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type TracksControllerGetAllResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerGetAll>>
>;
export type TracksControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerCreate>>
>;
export type TracksControllerGetByArtistResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerGetByArtist>>
>;
export type TracksControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerUpdate>>
>;
export type TracksControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerDelete>>
>;
